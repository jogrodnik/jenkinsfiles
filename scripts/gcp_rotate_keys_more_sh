#!/bin/bash

set -e  # Exit on any error
set -o pipefail  # Catch errors in pipelines

# Configuration
PROJECT_ID="your-project-id"
BUCKET_NAME="your-gcs-bucket"
KEY_RETENTION_LIMIT=2  # The maximum number of keys to retain per service account
SERVICE_ACCOUNTS=("service-account-1@your-project-id.iam.gserviceaccount.com" \
                  "service-account-2@your-project-id.iam.gserviceaccount.com" \
                  "service-account-key-admin@your-project-id.iam.gserviceaccount.com")

# Log function with timestamps
log_message() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1"
}

# Rotate key for a specific service account
rotate_key() {
    local service_account=$1
    log_message "Starting key rotation for $service_account"

    # Step 1: Generate a new key
    local new_key_file="/tmp/${service_account//[@.]/_}_key.json"
    gcloud iam service-accounts keys create "$new_key_file" \
        --iam-account="$service_account" \
        --project="$PROJECT_ID" -q

    # Step 2: Upload the new key to the GCS bucket
    local gcs_key_path="gs://${BUCKET_NAME}/${service_account}_$(date +%Y%m%d%H%M%S).json"
    gsutil cp "$new_key_file" "$gcs_key_path"
    log_message "Uploaded new key to $gcs_key_path"

    # Step 3: Verify and activate the new key (for key-admin accounts)
    if [[ "$service_account" == "service-account-key-admin@your-project-id.iam.gserviceaccount.com" ]]; then
        log_message "Validating new key for key-admin service account"

        # Temporarily authenticate with the new key
        gcloud auth activate-service-account "$service_account" --key-file="$new_key_file" --project="$PROJECT_ID"
        
        # Check if the new key works
        if gcloud iam service-accounts keys list --iam-account="$service_account" --project="$PROJECT_ID" > /dev/null 2>&1; then
            log_message "New key validated for key-admin service account"
        else
            log_message "Failed to validate new key for key-admin; aborting rotation for this account."
            rm "$new_key_file"
            return 1
        fi
    fi

    # Step 4: Clean up old keys if exceeding the retention limit
    local key_ids=($(gcloud iam service-accounts keys list \
        --iam-account="$service_account" \
        --project="$PROJECT_ID" \
        --managed-by="user" \
        --format="value(name)"))

    # Check if keys exceed the retention limit and delete the oldest if so
    if [ "${#key_ids[@]}" -gt "$KEY_RETENTION_LIMIT" ]; then
        log_message "More than $KEY_RETENTION_LIMIT keys found. Deleting oldest keys..."

        # Sort keys by creation time and delete the oldest until we reach the retention limit
        for ((i=0; i<$((${#key_ids[@]} - $KEY_RETENTION_LIMIT)); i++)); do
            oldest_key_id="${key_ids[$i]}"
            gcloud iam service-accounts keys delete "$oldest_key_id" \
                --iam-account="$service_account" \
                --project="$PROJECT_ID" -q
            log_message "Deleted oldest key for $service_account: $oldest_key_id"
        done
    else
        log_message "Number of keys within limit; no deletion necessary."
    fi

    # Step 5: Clean up the local key file
    rm "$new_key_file"
}

# Main loop to iterate over each service account
log_message "Starting key rotation for all service accounts"
for service_account in "${SERVICE_ACCOUNTS[@]}"; do
    rotate_key "$service_account" || log_message "Key rotation failed for $service_account"
done

log_message "Key rotation completed for all service accounts."
