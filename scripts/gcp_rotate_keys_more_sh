#!/bin/bash

# Exit script on any error
set -e
set -o pipefail

# Check for required arguments
if [ "$#" -lt 4 ]; then
    echo "Usage: $0 <PROJECT_ID> <BUCKET_NAME> <KMS_KEY> <SERVICE_ACCOUNTS>"
    echo "Example: $0 my-project-id my-bucket-name projects/my-project/locations/us/keyRings/my-keyring/cryptoKeys/my-key service-account-1@my-project.iam.gserviceaccount.com,service-account-2@my-project.iam.gserviceaccount.com"
    exit 1
fi

# Assign parameters to variables
PROJECT_ID=$1
BUCKET_NAME=$2
KMS_KEY=$3
IFS=',' read -r -a SERVICE_ACCOUNTS <<< "$4"  # Split comma-separated service accounts into an array

# Verify if any parameter is empty
if [[ -z "$PROJECT_ID" || -z "$BUCKET_NAME" || -z "$KMS_KEY" || -z "${SERVICE_ACCOUNTS[*]}" ]]; then
    echo "Error: One or more parameters are empty."
    echo "Usage: $0 <PROJECT_ID> <BUCKET_NAME> <KMS_KEY> <SERVICE_ACCOUNTS>"
    exit 1
fi

# Define constants
LOCATION="US"  # Default bucket location; modify if necessary
KEY_RETENTION_LIMIT=2  # Maximum number of active keys to retain per service account

# Function to log messages with timestamps
log_message() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1"
}

# Function to check if a service account exists
check_service_account_exists() {
    local service_account=$1
    if gcloud iam service-accounts describe "$service_account" --project "$PROJECT_ID" > /dev/null 2>&1; then
        return 0  # Service account exists
    else
        log_message "Service account $service_account does not exist. Skipping rotation."
        return 1  # Service account does not exist
    fi
}

# Function to create a bucket with a KMS encryption key
create_bucket_with_kms() {
    local project_id=$1
    local bucket_name=$2
    local kms_key=$3

    # Check if the bucket already exists
    if gsutil ls -p "$project_id" "gs://$bucket_name" > /dev/null 2>&1; then
        log_message "Bucket gs://$bucket_name already exists. No need to create."
    else
        log_message "Creating bucket gs://$bucket_name with encryption key $kms_key..."
        gsutil mb -p "$project_id" -l "$LOCATION" -b on -k "$kms_key" "gs://$bucket_name"
        log_message "Bucket gs://$bucket_name created with encryption key $kms_key."
    fi
}

# Function to rotate keys for a specific service account
rotate_key() {
    local service_account=$1
    local service_name=${service_account%@*}  # Strip domain part of the email

    log_message "Starting key rotation for $service_account"

    # Check if the service account exists before proceeding
    if ! check_service_account_exists "$service_account"; then
        return 0  # Skip rotation if service account doesn't exist
    fi

    # Step 1: Generate a new key
    local new_key_file="/tmp/${service_name}_key.json"
    gcloud iam service-accounts keys create "$new_key_file" \
        --iam-account="$service_account" \
        --project="$PROJECT_ID" -q

    # Step 2: Define the GCS path for the new key and upload it
    local gcs_key_path="gs://${BUCKET_NAME}/${service_name}/${service_name}_$(date +%Y%m%d%H%M%S).json"
    gsutil cp "$new_key_file" "$gcs_key_path"
    log_message "Uploaded new key to $gcs_key_path"

    # Step 3: Validate the new key for the key-admin service account if necessary
    if [[ "$service_account" == "service-account-key-admin@${PROJECT_ID}.iam.gserviceaccount.com" ]]; then
        log_message "Validating new key for key-admin service account"

        # Temporarily authenticate with the new key
        gcloud auth activate-service-account "$service_account" --key-file="$new_key_file" --project="$PROJECT_ID"
        
        # Check if the new key works
        if gcloud iam service-accounts keys list --iam-account="$service_account" --project="$PROJECT_ID" > /dev/null 2>&1; then
            log_message "New key validated for key-admin service account"
        else
            log_message "Failed to validate new key for key-admin; aborting rotation for this account."
            rm "$new_key_file"
            return 1
        fi
    fi

    # Step 4: Backup and clean up old keys if exceeding the retention limit
    local key_ids=($(gcloud iam service-accounts keys list \
        --iam-account="$service_account" \
        --project="$PROJECT_ID" \
        --managed-by="user" \
        --format="value(name)"))

    if [ "${#key_ids[@]}" -gt "$KEY_RETENTION_LIMIT" ]; then
        log_message "More than $KEY_RETENTION_LIMIT keys found. Backing up and deleting oldest keys..."

        # Sort keys by creation time and delete the oldest after backing up
        for ((i=0; i<$((${#key_ids[@]} - $KEY_RETENTION_LIMIT)); i++)); do
            oldest_key_id="${key_ids[$i]}"

            # Backup the key before deletion
            local backup_key_file="/tmp/${service_name}_backup_${oldest_key_id##*/}.json"
            gcloud iam service-accounts keys get-iam-policy "$oldest_key_id" \
                --iam-account="$service_account" \
                --project="$PROJECT_ID" --format="json" > "$backup_key_file"

            # Define GCS path for the backup
            local gcs_backup_path="gs://${BUCKET_NAME}/${service_name}/backup/${service_name}_backup_$(date +%Y%m%d%H%M%S)_${oldest_key_id##*/}.json"
            gsutil cp "$backup_key_file" "$gcs_backup_path"
            log_message "Backed up old key to $gcs_backup_path"

            # Delete the oldest key
            gcloud iam service-accounts keys delete "$oldest_key_id" \
                --iam-account="$service_account" \
                --project="$PROJECT_ID" -q
            log_message "Deleted oldest key for $service_account: $oldest_key_id"

            # Clean up local backup file
            rm "$backup_key_file"
        done
    else
        log_message "Number of keys within limit; no deletion necessary."
    fi

    # Step 5: Clean up the local new key file
    rm "$new_key_file"
}

# Create the bucket with KMS encryption if it doesn't exist
create_bucket_with_kms "$PROJECT_ID" "$BUCKET_NAME" "$KMS_KEY"

# Main loop to iterate over each service account and rotate keys
log_message "Starting key rotation for all specified service accounts"
for service_account in "${SERVICE_ACCOUNTS[@]}"; do
    rotate_key "$service_account" || log_message "Key rotation failed for $service_account"
done

log_message "Key rotation completed for all service accounts."
